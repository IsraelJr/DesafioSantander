//
//  LoginWorker.swift
//  DesafioSantander
//
//  Created by Israel Alves Santos Junior on 05/07/19.
//  Copyright (c) 2019 Israel Alves Santos Junior. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


class LoginWorker {
    
    let url = "https://bank-app-test.herokuapp.com/api/login"
    let ud  = UserDefaults.standard
    
    private static let basePathPost = "https://bank-app-test.herokuapp.com/api/login"
    private static let configuration: URLSessionConfiguration = {

        let config = URLSessionConfiguration.default
        config.httpAdditionalHeaders = ["Content-Type": "application/json"]
        config.timeoutIntervalForRequest = 5.0
        config.httpMaximumConnectionsPerHost = 2

        return config

    }()

private static let session = URLSession(configuration: configuration)

    
    func doSomeWork() { }
    
    func saveUserDefault(button: UISwitch, user: UITextField) {

        if !button.isOn {
            user.text = nil
        }

        ud.set(user.text, forKey: "user")
        ud.set(button.isOn, forKey: "saveUser")

    }

    func loadUserDefault() -> String {
        return self.ud.string(forKey: "user") ?? ""
    }
    
    func loadUserDefaultBool() -> Bool {
        return self.ud.bool(forKey: "saveUser")
    }

    
    func validateLogin(userModel: Login.UserAccount, onComplete: @escaping (Bool) -> Void){
        guard let url = URL(string: LoginWorker.basePathPost) else {
                 onComplete(false)
                    return
                }
        
                var request = URLRequest(url: url)
                request.httpMethod = "POST"
                guard let json = try? JSONEncoder().encode(userModel) else {
                    onComplete(false)
                    return
                }
        
                request.httpBody = json
        
        let dataTask = LoginWorker.session.dataTask(with: url) { (dataJson, responseJson, error) in
                    if error == nil {
                        let response = responseJson as? HTTPURLResponse
                        if response!.statusCode == 200 {
                            let data = dataJson
                            print("Login Worker Resultado: \(String(describing: data))")
                            onComplete(true)
                        } else {
                            onComplete(false)
                            print("Login Worker Código de retorno da requisição: \(String(describing: response?.statusCode))")
                            return
                        }
                    } else {
                        onComplete(false)
                    }
                }
                dataTask.resume()
            }
    
}
