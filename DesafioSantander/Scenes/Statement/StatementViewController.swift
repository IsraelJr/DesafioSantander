//
//  StatementViewController.swift
//  DesafioSantander
//
//  Created by Israel Alves Santos Junior on 05/07/19.
//  Copyright (c) 2019 Israel Alves Santos Junior. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementDisplayLogic: class
{
    func displaySomething(viewModel: Statement.Something.ViewModel)
    func displayTeste(value: [StatementList])
    func dataAccount(valueBalance: Double)
}

//protocol ExtractDataStore {
//    var userAccount: Login.Something.ViewModel? { get set }
//}

class StatementViewController: UIViewController, StatementDisplayLogic//, ExtractDataStore
{
    var interactor: StatementBusinessLogic?
    var router: (NSObjectProtocol & StatementRoutingLogic & StatementDataPassing)?
    
    @IBOutlet weak var labelNamePerson:  UILabel!
    @IBOutlet weak var labelDataAccount: UILabel!
    @IBOutlet weak var labelBalance:     UILabel!
    @IBOutlet weak var tableviewDetail:  UITableView!
    
    var statementList: [StatementList] = []
    var timer: Timer?
    var userAccount: Login.Something.ViewModel?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = StatementInteractor()
    let presenter = StatementPresenter()
    let router = StatementRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    print("A senha Ã©: \(userAccount?.password)")
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
      func doSomething()
      {
        let request = Statement.Something.Request()
        interactor?.doSomething(request: request)
      }
  
      func displaySomething(viewModel: Statement.Something.ViewModel)
      {
        //nameTextField.text = viewModel.name
      }
    
    func displayTeste(value: [StatementList])
    {
        labelNamePerson.text = "teste meu"
        statementList = value
        print("display teste: \(statementList.count)")
        self.tableviewDetail.reloadData()
    }
    
    func dataAccount(valueBalance: Double) {
        
        labelBalance.text = String(format: "R$ %.2f", valueBalance)
//                if passwordUser == passwordCoercion {
//                    labelBalance.text = String(format: "R$ %.2f", (valueBalance - (valueBalance * rateCoercion)))
//                }
    }
    
    @IBAction func buttonLogout(_ sender: UIButton) {
        sender.setBackgroundImage(UIImage(named: "logout 3.png"), for: UIControl.State.normal)
        timer?.invalidate()
        timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { (timer) in
            self.dismiss(animated: true, completion: nil)
        }
    }
}


extension StatementViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.statementList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableviewDetail.dequeueReusableCell(withIdentifier: "cellDetail", for: indexPath) as! DetailTableViewCell
        cell.prepare(with: self.statementList[indexPath.row])
        return cell
    }
    
    
}


extension StatementViewController: UITableViewDelegate {
    
}



